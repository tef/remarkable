"I also dream about a modern replacement for LaTeX designed from the ground up
 to target multiple output formats (at least PDF, HTML, EPUB)"

	-- John MacFarlane, author of Pandoc

A markup language to produce PDF, HTML, EPUB documents
--------------------------------------------------------------------------------

I want LaTeX without TeX. ReStructuredText without being totally ad-hoc
to parse like tex, ascii-art driven like rst, or clumsy to escape in like html.

Check the README file for an exploration of other formats and design choices.

Design Goals:

- No Ascii Art for formatting semantics. All commands follow same form
- It should be trivial to include any text without escaping
- Invisible whitespace should have no effect, for ex: trailing whitespace 
- However, some commands may take an indented block.

- TeX like syntax, but vastly simpler parsing rules.
- HTML, RST, LaTeX like semantics, i.e section, h1, strong, footnote

Non Goals:

- Markdown esque shorthand. Will not be defined in the core language, but can be 
  added by filters.

- Programmable. The Language will be declarative, without macros.
  Can be added by filters.

Syntax
--------------------------------------------------------------------------------

Rule 1: \ is the command character.

	Commands begin with a \ have a name, have a number of
	arguments,and end when there is no more arguments, 
	or a semicolon.

	e.g \bar			No args
	    hi \b{there} 		A text arg
	    hello \foo[name=1, a=2]	A collection arg
            \baz[1]{hello}{world!}	A mixture
	    foo\bar[1,2]baz		No ;
            Hello \foo;there		Ended with ;

	Commands can take collections, then text arguments. Usually 
	text inside [ .. ] is the text about how to format it, and
	text inside { .. } is the text to be formatted. These
	are covered in later rules.

	Command names may contain numbers, letters, underscores (_) and
	periods (.) but must not whitespace, control characters, or
	puncutation marks, especially ones used by the markup : \ { } [ ] ! : ; 

	Command names may include unicode numbers, letters.

        A semicolon (;) marks the end of a command, and is not treated 
        like text, so \foo[1]bar and \foo[1];bar are equivilent.
        
        \DMO{ is \foo[1]; command foo or command foo followed by ;? What is behavior of ; outside command invocation?}

        There are commands for document structure as well as
        special characters too.

Rule 2: Spaces and Linebreaks

	Multiple spaces are treated as one space, e.g.

 		Foo    Bar  	is:	Foo Bar

	Two line breaks mark the end of a paragraph, e.g

        	Hello           is:     Hello
                                
                Thing                   Thing

        One line break will be treated as a space between
	lines, including trailing/leading whitespace e.g:

	 	This		is: 	This Thing
		Thing
                			Over Here
		Over                      
               		Here                  

	Use \ at the end of a line to ignore the line break,
	without inserting a space.

        e.g     This\           is:     ThisThing
                Thing
                
        

	A \ at the end of the file is not an error, but will 
	have no effect.
	
	There can be trailing whitespace between \ and the 
        end of line or file.

Rule 3: \ can be used to escape special characters in commands.

	\\ is a literal \, and  \, \{ \} \[ \] \! \: \; \= produce literals.

Rule 4: Inline Text Arguments

	Text arguments are delimited by matching {}'s

	e.g \foo{bar}{baz}
	    \section{\h1{blah}}
	
	These cannot span multiple lines, but other commands can be nested
        inside.
        
        \DMO{{{what are the semantics of command within commands? What is the application order of commands?
        I would lean towards commands taking an AST. This way you can make extension commands like so:
        \list{
        	\bullet{something}
        	\bullet{something else}
        }
        Without having to define \bullet on the top level.
        
        You can get around the problem of having extension writers have to lower AST by iteratively applying the top
        level command. but this introduces unbounded parse time in the case where extension writers add more AST elems
        than they remove.
        }}}

Rule 5: Multiline Text Arguments

	You can use {{{, }}} too to break text
	over muliple lines.

	    \lol{{{
            a thing
            that is lol
            }}}
       	\DMO{ is ^}}}$ needed for closure of ML block or can it terminate the block in other positions?}

	Note: When you use  {{{ ... }}} you do not need to
	escape solitary }'s or }}'s inside.
	\DMO{Tabs on the beginning of line within multiline blocks?}

	Rationale: It's a lot easier to trace missing bracket errors
	when you have to explicitly make it multiline.

	
	FIXME: Blank lines/indentation in multiline braces.
	
	\DMO{nvm, can't read :) }
	
Rule 6: Collection arguments

	Commands can take a nested collection of text items
	seperated by commas: \foo[1,2,3] 

	Items can optionally be named, these names follow
	the same rules of commands, i.e \foo[a=1,b=2,c=foo]
	Unnamed items must preceed named items in lists.

	Items can be text, so commands can appear inside
	lists, \foo[a=\b{foo}, b=lol]

	= and , can be escaped like \= or \, or
	inside nested arguments like \foo[\bar{1,2}]

	Items can also be collections too, e.g:
		\foo[a=[1,2,3,foo, bar]]

	There can be whitespace around the , or =
	and it will be ignored.


Rule 7: Raw Text Arguments

	Use matching numbers of !'s to mark text arguments
	as raw, so \ }  appear as literals.
	
	e.g 	\foo{!{foo}!}	is	{foo}
		\foo{!bar\!!}	is	bar\!
		\foo{!!Hi!Ho!!} is	Hi!Ho

	{!... !} cannot have newlines but {{{! .... !}}} can
	
	\DMO{{{
	Thinking about the AST lowering. Maybe it makes this feature is not needed,
	since rawness is often associated with command. E.G. \code[c]{int c_code_here()}
	}}}

	Commands can take multiple raw text arguments
	Raw Text arguments cannot contain commands, or nest.

	Whitespace in raw text arguments is preserved.


Rule 8: Indented Block text arguments
	A command ending in : can be passed an indented text block
	as an argument.

	e.g:	
		\cmd:			\cmd{{{hello
			hello		}}}
		blah
	

	Any text indented more than the line of the original command
	is considered to be part of the block.

	The indented block continues until a line starts with less
	or equal indentation to the line with the command, and then
	the minimum whitespace prefix is removed from the block.

	The indent may be tabs or spaces, however they are not
	comparable. The minimum prefix is the set of whitespace
	shared by all non blank indented lines in the block. 

	If there is no consistent prefix for the block it will be 
	treated as an error.

	Blank or whitespace only lines will be treated
	as part of the block.

	Block text arguments can be nested. 
	Blocks cannot be used within single line text arguments.


Rule 9: Indented Raw text block argument
	If a command has ! at the end, the next consistently
	indented block of text is used as a raw text argument

	e.g:
		\cmd!
			text block

		text.

	Like raw text, newlines and backslashes are reserved,
	like blocks, minimum indentation is skipped, but raw
	blocks cannot be nested. 
	

Rule 10: Text Encoding 

	Command names are NFC normalized.
	BOMs are ignored at beginning.
	Input should be utf-8, without surrogate pair characters.
	Unicode whitespace/para characters should be respected.

	
Semantics
--------------------------------------------------------------------------------

Standard HTML document elements, with a smattering of LaTeX, 
and ReStructuredText

Something like:
	
	\code[python]{}, \h[1], \b, \i{...}, \pagebreak
	\note, \footnote, \sidenote, \ref, \link,
	\author, \title, \version, \list, \table,
	\metadata[author=...,title=....], \q{....}

Should be able to make books, chapters, citations, bibliographies, title pages,
rfc style things etc.

As well as character escapes \u{NNNN...}, \em, \en.

Issues
--------------------------------------------------------------------------------

- Can \ only escape specific glyphs? 
	It's really for 'special characters' inside commands/arguments

- Tabs and spaces.
	Does the minimum shared indent make sense?

- Unicode in command names ? Currently implementation designed.

- {!!}, {!!!!} etc
	how should these be parsed. 

- Clarify whitespace in raw blocks

Changelog
--------------------------------------------------------------------------------


- Nailing down line continuations, reordering rules. Fixing
  indentation semantics, whitespace handling.
- Cleaning up most of the spec. ; *are* optional, bare commands are good too
- Explained justification of {}/{{{}}}

- Proposal 4

- Made unicode choices
- Use !, !!, etc for raw text blocks. Allows escaping without subsitutions
- Added back indented blocks for non raw text.
- Allowed _ and . in names.
- Line contiuations

Proposal 2/3:
- Fleshing out semantics of names and arguments.

Proposal 1:
- Functions take any variety of text and list args, but only
  raw blocks can be indented.
- Linebreaks are ignored.

Proposal 0:

- Added {{{}}} , raw blocks through function name suffix \foo!
- Functions take multiple args and text block, optionally indented.
- Args can be named, linebreaks are literal
